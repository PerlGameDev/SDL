
=head1 NAME

SDLx::Sound - Simple audio interface

=head1 CATEGORY

Extension

=head1 SYNOPSIS

    use SDLx::Sound;
    my $snd = SDLx::Sound->new();

    $snd->load(
	arbitrary_name =>  'some_sound.wav',
    );

    $snd->play('arbitrary_name');

    $snd->play('arbitrary_name', loops => -1);			# loop .wav infinitely (default is play once, 1)

    $snd->play('arbitrary_name', loops => 3, volume => 50);	# play 3x with volume lowered to 50%

    $snd->stop();

=head1 DESCRIPTION

You may use this module to emit audio / sound / music from your SDL / SDLx application or game.

It's a thin interface to L<SDL::Mixer::Music>, which it wraps/ uses internally, merely rounding off the edges of init,
pre-loading and playback.

Calls to play() are not blocking, each sound will play in the next available channel. That's how SDL::Mixer::Music works.

=head1 METHODS

=head2 new

Returns a new instance of SDLx::Sound, initiating sound with C<SDL::Mixer::open_audio( 44100, AUDIO_S16SYS, 2, 4096 )>

=head2 load

Processes the passed sound files, checks for existence, and pre-loads the files via SDL::Mixer::Music::load_MUS,
throwing errors if anything fails. In contrast to earlier versions of SDLx::Sound, this version here actually does a
pre-load and keeps files in memory, while play() will rely on this memory structure being prepared and ready to play.

Each sound file will be prepared with I<volume> = 100 and I<loops> = 1, one-shot play. That's how this sound will be played
when you call it with -E<gt>play('some_sound').

=head2 play

Doing something like C<$audio-E<gt>play('sound_name');> will fetch the prepared sound from the internal C<-E<gt>{files}> hash
and play it via C<SDL::Mixer::Music::play_music>. As previous versions of SDLx::Sound were able to autoload via play(), this
updated version here does something similar: passing it a file_path will trigger the internal load() routine and the given
file will be loaded with the name representing it being the path you passed in to play/load a sound.

You may pass additional key/value pairs to override settings from -E<gt>load(), see SYNOPSIS.

=head2 pause

SDL::Mixer::Music::pause_music()

=head2 resume

SDL::Mixer::Music::resume_music()

=head2 stop

SDL::Mixer::Music::halt_music()

=head2 playing() and is_playing()

Both call SDL::Mixer::Music::playing_music(), returning a true value if the mixer is playing any sound.

=head1 SEE ALSO

This here is a simple interface to L<SDL::Mixer::Music>, which you may also call directly for additional
bells and whistles.

And then there's L<SDLx::Music>. While the bundled example C<examples/SDLx/music.pl> is able to
play something with it, the POD is out of sync with the actual internals. L<SDLx::Music> behaves like this module here
as it prepares defaults for every file, which you may then overrride upon calling play() - nice inspiration. But then
it has a somewhat IMHO convoluted way of loading/managing loaded files and has a less convenient play() method.

=head1 AUTHORS

See L<SDL/AUTHORS>.

=head1 COPYRIGHT & LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


